{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeSlice = require( '@stdlib/slice-base-normalize-slice' );\nvar sliceLength = require( '@stdlib/slice-base-length' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' ).ndarray;\nvar format = require( '@stdlib/string-format' );\n\n\n// MODULES //\n\n/**\n* Returns a shallow copy of a portion of an array.\n*\n* @param {Collection} x - input array\n* @param {Slice} s - slice object\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} slice exceeds array bounds\n* @returns {Collection} output array\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n*\n* var x = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var y = slice( x, s, false );\n* // returns [ 8, 6, 4, 2 ]\n*\n* var out = ( y === x );\n* // returns false\n*\n* @example\n* var Int32Array = require( '@stdlib/array-int32' );\n* var Slice = require( '@stdlib/slice-ctor' );\n*\n* var x = new Int32Array( [ 1, 2, 3, 4, 5, 6, 7, 8 ] );\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var y = slice( x, s, false );\n* // returns <Int32Array>[ 8, 6, 4, 2 ]\n*\n* var out = ( y === x );\n* // returns false\n*/\nfunction slice( x, s, strict ) {\n\tvar out;\n\tvar len;\n\tvar ns;\n\tvar dt;\n\tvar N;\n\n\tlen = x.length;\n\n\t// Normalize the slice object base on the array length:\n\tns = normalizeSlice( s, len, true );\n\n\t// Check whether the slice exceeds the array bounds...\n\tif ( ns.code ) {\n\t\tif ( strict ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Slice exceeds array bounds. Array length: %d.', len ) );\n\t\t}\n\t\t// Normalize again, this time allowing for out-of-bounds indices:\n\t\tns = normalizeSlice( s, len, false );\n\t}\n\t// Compute the slice length:\n\tN = sliceLength( ns );\n\n\t// Resolve the input array data type:\n\tdt = dtype( x );\n\n\t// Allocate an output array:\n\tif ( dt === 'generic' || dt === null ) { // note: if we were provided an \"exotic\" array object, fallback to always returning a \"generic\" array\n\t\tout = zeros( N );\n\t} else {\n\t\tout = new x.constructor( N ); // note: this should accommodate array species which inherit from built-in/known constructors and we assume that all constructors support providing a length argument\n\t}\n\t// Copy elements to the output array:\n\tgcopy( N, x, ns.step, ns.start, out, 1, 0 );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a shallow copy of a portion of an array.\n*\n* @module @stdlib/array-base-fancy-slice\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var slice = require( '@stdlib/array-base-fancy-slice' );\n*\n* var x = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var y = slice( x, s, false );\n* // returns [ 8, 6, 4, 2 ]\n*\n* var out = ( y === x );\n* // returns false\n*\n* @example\n* var Int32Array = require( '@stdlib/array-int32' );\n* var Slice = require( '@stdlib/slice-ctor' );\n* var slice = require( '@stdlib/array-base-fancy-slice' );\n*\n* var x = new Int32Array( [ 1, 2, 3, 4, 5, 6, 7, 8 ] );\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var y = slice( x, s, false );\n* // returns <Int32Array>[ 8, 6, 4, 2 ]\n*\n* var out = ( y === x );\n* // returns false\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAc,QAAS,2BAA4B,EACnDC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAQ,QAAS,qBAAsB,EACvCC,EAAQ,QAAS,yBAA0B,EAAE,QAC7CC,EAAS,QAAS,uBAAwB,EA2C9C,SAASC,EAAOC,EAAGC,EAAGC,EAAS,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAQJ,GANAH,EAAMJ,EAAE,OAGRK,EAAKZ,EAAgBQ,EAAGG,EAAK,EAAK,EAG7BC,EAAG,KAAO,CACd,GAAKH,EACJ,MAAM,IAAI,WAAYJ,EAAQ,kEAAmEM,CAAI,CAAE,EAGxGC,EAAKZ,EAAgBQ,EAAGG,EAAK,EAAM,CACpC,CAEA,OAAAG,EAAIb,EAAaW,CAAG,EAGpBC,EAAKV,EAAOI,CAAE,EAGTM,IAAO,WAAaA,IAAO,KAC/BH,EAAMR,EAAOY,CAAE,EAEfJ,EAAM,IAAIH,EAAE,YAAaO,CAAE,EAG5BV,EAAOU,EAAGP,EAAGK,EAAG,KAAMA,EAAG,MAAOF,EAAK,EAAG,CAAE,EAEnCA,CACR,CAKAX,EAAO,QAAUO,ICpDjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "normalizeSlice", "sliceLength", "zeros", "dtype", "gcopy", "format", "slice", "x", "s", "strict", "out", "len", "ns", "dt", "N", "main"]
}
